//------------Reinforcements------------
block
{
Frame noreinf;	FRM_FindFrame(noreinf, "noreinf");
Frame Spawn2;	FRM_FindFrame(Spawn2, "Spawn2detect");
Frame Swgene;	FRM_FindFrame(Swgene,"Swgene");
Frame count;	FRM_FindFrame(count,"Counter");
Frame obj;		FRM_FindFrame(obj,"objectives");
Frame R00;	FRM_FindFrame(R00, "ER00");
Frame R01;	FRM_FindFrame(R01, "ER01");
Frame R02;	FRM_FindFrame(R02, "ER02");
Frame R03;	FRM_FindFrame(R03, "ER03");
Frame R04;	FRM_FindFrame(R04, "ER04");
Frame R05;	FRM_FindFrame(R05, "ER05");
Frame R06;	FRM_FindFrame(R06, "ER06");
Frame R07;	FRM_FindFrame(R07, "ER07");
Frame R08;	FRM_FindFrame(R08, "ER08");
Frame R09;	FRM_FindFrame(R09, "ER09");
Frame R10;	FRM_FindFrame(R10, "ER10");
Frame R11;	FRM_FindFrame(R11, "ER11");
Frame R12;	FRM_FindFrame(R12, "ER12");
Frame R13;	FRM_FindFrame(R13, "ER13");
Frame R14;	FRM_FindFrame(R14, "ER14");
Frame R15;	FRM_FindFrame(R15, "ER15");
Frame R16;	FRM_FindFrame(R16, "ER16");
Frame R17;	FRM_FindFrame(R17, "ER17");
Frame R18;	FRM_FindFrame(R18, "ER18");
Frame R19;	FRM_FindFrame(R19, "ER19");
integer rnd1;
integer rnd_pause;
integer rndpause;
}
goto end;
OnSignal(2) //Signal from generator switch to de-activate signal from alarm
{
SetWhenever(Alarm1, 0);
//printf ("Signal 2");
goto end;
}
OnSignal(3) //Signal from generator switch to activate signal from alarm
{
SetWhenever(Alarm1, 1);
//printf ("Signal 3");
goto end;
}
Whenever Alarm1 (_SignalReceived(1))
{
goto reinfactive;
}
label reinfactive:
SendSignal (noreinf,2);
SetObjectiveStatus(5, 2);
SendSignal (obj,11);
DisableWhenevers(1);
DisableSignals(1);
	rnd_pause= _randomint(150000)+150000;
	delay(rnd_pause);
	//printf ("Reinf Activated");
	//SendSignal (Spawn2,1);  //Signal to spawn cript
	SendSignal (count,1);   //signal to start bodycount
rnd1= _randomint(5)+1;
if (rnd1==1) 
  {
 SendSignal(R00, 1);
 SendSignal(R06, 1);
 SendSignal(R07, 1);
   delay(3000);
 SendSignal(R08, 1);
 SendSignal(R10, 1);
 SendSignal(R11, 1);
 SendSignal(R12, 1);
   delay(5000);
 SendSignal(R13, 1);
 SendSignal(R14, 1);
 SendSignal(R15, 1);
 SendSignal(R16, 1);
goto end;
  }
  if (rnd1==2) 
  {
 SendSignal(R00, 1);
 SendSignal(R02, 1);
 SendSignal(R03, 1);
   delay(5000);
 SendSignal(R06, 1);
 SendSignal(R08, 1);
 SendSignal(R10, 1);
 SendSignal(R11, 1);
   delay(4000);
 SendSignal(R14, 1);
 SendSignal(R15, 1);
 SendSignal(R16, 1);
goto end;
  }
  if (rnd1==3) 
  {
 SendSignal(R00, 1);
 SendSignal(R04, 1);
 SendSignal(R05, 1);
  delay(2000);
 SendSignal(R09, 1);
 SendSignal(R10, 1);
 SendSignal(R14, 1);
  delay(5000);
 SendSignal(R15, 1);
 SendSignal(R16, 1);
 SendSignal(R17, 1);
  delay(2000);
 SendSignal(R18, 1);
 SendSignal(R19, 1);
 goto clear;
  }
  if (rnd1==4)
  {
 SendSignal(R00, 1);
 SendSignal(R01, 1);
 SendSignal(R02, 1);
  delay(2000);
 SendSignal(R03, 1);
 SendSignal(R04, 1);
 SendSignal(R05, 1);
  delay(5000);
 SendSignal(R06, 1);
 SendSignal(R07, 1);
 SendSignal(R08, 1);
  delay(4000);
 SendSignal(R09, 1);
 SendSignal(R10, 1);
 SendSignal(R11, 1);
 SendSignal(R17, 1);
  delay(2000);
 SendSignal(R18, 1);
 SendSignal(R19, 1);
goto clear;
  }
  if (rnd1==5)
  {
 SendSignal(R00, 1);
 SendSignal(R01, 1);
 SendSignal(R02, 1);
  delay(3000);
 SendSignal(R03, 1);
 SendSignal(R04, 1);
 SendSignal(R05, 1);
  delay(3000);
 SendSignal(R06, 1);
 SendSignal(R07, 1);
 SendSignal(R08, 1);
  delay(2000);
 SendSignal(R09, 1);
 SendSignal(R10, 1);
 SendSignal(R11, 1);
  delay(4000);
 SendSignal(R12, 1);
 SendSignal(R13, 1);
 SendSignal(R14, 1);
  delay(5000);
 SendSignal(R15, 1);
 SendSignal(R16, 1);
 SendSignal(R17, 1);
  delay(2000);
 SendSignal(R18, 1);
 SendSignal(R19, 1);
goto clear;
  }
label clear:
 rndpause= _randomint(120000)+120000;
 delay(rndpause);
SendSignal(R04, 3);
delay(2000);
SendSignal(R05, 3);
delay(1500);
SendSignal(R09, 3);
delay(1500);
SendSignal(R17, 3);
delay(2000);
SendSignal(R18, 3);
delay(2000);
SendSignal(R19, 3);
goto end;

label end:
