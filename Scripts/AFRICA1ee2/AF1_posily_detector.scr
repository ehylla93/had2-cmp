// AF1_posily_detector

Block
{
Frame me;		            FRM_GetMyFrame(me);

Frame r01;	FRM_FindFrame(r01, "AF1_01");
Integer ru01;	ru01=1;
Frame r02;	FRM_FindFrame(r02, "AF1_02");
Integer ru02;	ru02=1;
Frame r03;	FRM_FindFrame(r03, "AF1_03");
Integer ru03;	ru03=1;
Frame r04;	FRM_FindFrame(r04, "AF1_04");
Integer ru04;	ru04=1;
Frame r05;	FRM_FindFrame(r05, "AF1_05");
Integer ru05;	ru05=1;
Frame r06;	FRM_FindFrame(r06, "AF1_06");
Integer ru06;	ru06=1;
Frame r07;	FRM_FindFrame(r07, "AF1_07");
Integer ru07;	ru07=1;
Frame r08;	FRM_FindFrame(r08, "AF1_08");
Integer ru08;	ru08=1;
Frame r09;	FRM_FindFrame(r09, "AF1_09");
Integer ru09;	ru09=1;
Frame r10;	FRM_FindFrame(r10, "AF1_10");
Integer ru10;	ru10=1;
Frame r11;	FRM_FindFrame(r11, "AF1_11");
Integer ru11;	ru11=1;
Frame r12;	FRM_FindFrame(r12, "AF1_12");
Integer ru12;	ru12=1;
Frame r13;	FRM_FindFrame(r13, "AF1_13");
Integer ru13;	ru13=1;
Frame r14;	FRM_FindFrame(r14, "AF1_14");
Integer ru14;	ru14=1;
Frame r15;	FRM_FindFrame(r15, "AF1_15");
Integer ru15;	ru15=1;
Frame r16;	FRM_FindFrame(r16, "AF1_16");
Integer ru16;	ru16=1;
Frame r17;	FRM_FindFrame(r17, "AF1_17");
Integer ru17;	ru17=1;
Frame r18;	FRM_FindFrame(r18, "AF1_18");
Integer ru18;	ru18=1;
Frame r19;	FRM_FindFrame(r19, "AF1_19");
Integer ru19;	ru19=1;
Frame r20;	FRM_FindFrame(r20, "AF1_20");
Integer ru20;	ru20=1;
Frame r21;	FRM_FindFrame(r21, "AF1_cge_posila_01");
Integer ru21;	ru21=1;
Frame r22;	FRM_FindFrame(r22, "AF1_22");
Integer ru22;	ru22=1;
Frame r23;	FRM_FindFrame(r23, "AF1_23");
Integer ru23;	ru23=1;
Frame r24;	FRM_FindFrame(r24, "AF1_24");
Integer ru24;	ru24=1;
Frame r25;	FRM_FindFrame(r25, "AF1_25");
Integer ru25;	ru25=1;
Frame r26;	FRM_FindFrame(r26, "AF1_26");
Integer ru26;	ru26=1;
Frame r27;	FRM_FindFrame(r27, "AF1_27");
Integer ru27;	ru27=1;

FRAME posila01;			FRM_FindFrame(posila01, "AF1_posila_01");
  FRAME posila02;			FRM_FindFrame(posila02, "AF1_posila_02");
  FRAME posila03;			FRM_FindFrame(posila03, "AF1_posila_03");
  FRAME posila04;			FRM_FindFrame(posila04, "AF1_posila_04");
  FRAME posila05;			FRM_FindFrame(posila05, "AF1_posila_05");
  FRAME posila06;			FRM_FindFrame(posila06, "AF1_posila_06");
  FRAME posila07;			FRM_FindFrame(posila07, "AF1_posila_07");
  FRAME posila08;			FRM_FindFrame(posila08, "AF1_posila_08");
  FRAME posila09;			FRM_FindFrame(posila09, "AF1_posila_09");
  FRAME posila10;			FRM_FindFrame(posila10, "AF1_posila_10");
  FRAME tank01_01;			FRM_FindFrame(tank01_01, "AF1_tank01_01");

Integer counter;
	counter=0;
}
// -------------------------------------------------------------------------------------------------------------


Whenever player (_PlayerInRange(1200))
{
Delay(1000);
goto deadcounter;
}

// -------------------------------------------------------------------------------------------------------------
GoTo end;

Label deadcounter:
Block
{
	If(ru01==1)
	{
		If(_ACTOR_GetState(r01)==0)	{	counter=counter+1;	ru01=0;	}
	}
	If(ru02==1)
	{
		If(_ACTOR_GetState(r02)==0)	{	counter=counter+1;	ru02=0;	}
	}
	If(ru03==1)
	{
		If(_ACTOR_GetState(r03)==0)	{	counter=counter+1;	ru03=0;	}
	}
	If(ru04==1)
	{
		If(_ACTOR_GetState(r04)==0)	{	counter=counter+1;	ru04=0;	}
	}
	If(ru05==1)
	{
		If(_ACTOR_GetState(r05)==0)	{	counter=counter+1;	ru05=0;	}
	}
	If(ru06==1)
	{
		If(_ACTOR_GetState(r06)==0)	{	counter=counter+1;	ru06=0;	}
	}
	If(ru07==1)
	{
		If(_ACTOR_GetState(r07)==0)	{	counter=counter+1;	ru07=0;	}
	}
	If(ru08==1)
	{
		If(_ACTOR_GetState(r08)==0)	{	counter=counter+1;	ru08=0;	}
	}
	If(ru09==1)
	{
		If(_ACTOR_GetState(r09)==0)	{	counter=counter+1;	ru09=0;	}
	}
	If(ru10==1)
	{
		If(_ACTOR_GetState(r10)==0)	{	counter=counter+1;	ru10=0;	}
	}
	If(ru11==1)
	{
		If(_ACTOR_GetState(r11)==0)	{	counter=counter+1;	ru11=0;	}
	}
	If(ru12==1)
	{	
		If(_ACTOR_GetState(r12)==0)	{	counter=counter+1;	ru12=0;	}
	}
	If(ru13==1)
	{
		If(_ACTOR_GetState(r13)==0)	{	counter=counter+1;	ru13=0;	}
	}
	If(ru14==1)
	{
		If(_ACTOR_GetState(r14)==0)	{	counter=counter+1;	ru14=0;	}
	}
	If(ru15==1)
	{
		If(_ACTOR_GetState(r15)==0)	{	counter=counter+1;	ru15=0;	}
	}
	If(ru16==1)
	{
		If(_ACTOR_GetState(r16)==0)	{	counter=counter+1;	ru16=0;	}
	}
	If(ru17==1)
	{
		If(_ACTOR_GetState(r17)==0)	{	counter=counter+1;	ru17=0;	}
	}
	If(ru18==1)
	{
		If(_ACTOR_GetState(r18)==0)	{	counter=counter+1;	ru18=0;	}
	}
	If(ru19==1)
	{
		If(_ACTOR_GetState(r19)==0)	{	counter=counter+1;	ru19=0;	}
	}
	If(ru20==1)
	{
		If(_ACTOR_GetState(r20)==0)	{	counter=counter+1;	ru20=0;	}
	}
	If(ru21==1)
	{
		If(_ACTOR_GetState(r21)==0)	{	counter=counter+1;	ru21=0;	}
	}
	If(ru22==1)
	{	
		If(_ACTOR_GetState(r22)==0)	{	counter=counter+1;	ru22=0;	}
	}
	If(ru23==1)
	{
		If(_ACTOR_GetState(r23)==0)	{	counter=counter+1;	ru23=0;	}
	}
	If(ru24==1)
	{
		If(_ACTOR_GetState(r24)==0)	{	counter=counter+1;	ru24=0;	}
	}
	If(ru25==1)
	{
		If(_ACTOR_GetState(r25)==0)	{	counter=counter+1;	ru25=0;	}
	}
	If(ru26==1)
	{
		If(_ACTOR_GetState(r26)==0)	{	counter=counter+1;	ru26=0;	}
	}
	If(ru27==1)
	{
		If(_ACTOR_GetState(r27)==0)	{	counter=counter+1;	ru27=0;	}
	}
}
	
	
	If(counter>13)
	{
	Delay(5000);
	SendSignal(posila01, 1);
  Delay(500);
  SendSignal(posila02, 1);
  Delay(500);
  SendSignal(posila03, 1);
  Delay(10000);
  SendSignal(posila04, 1);
  Delay(500);
  SendSignal(posila05, 1);
  Delay(500);
  SendSignal(posila06, 1);
  Delay(10000);
  SendSignal(posila07, 1);
  Delay(400);
  SendSignal(posila08, 1);
  Delay(400);
  SendSignal(posila09, 1);
  SendSignal(posila10, 1);
  SendSignal(tank01_01, 1);
  GoTo end;
  }

Delay(5000);
GoTo deadcounter;

Label end:
